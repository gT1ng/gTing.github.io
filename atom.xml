<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gTing&#39;s blog</title>
  
  <subtitle>2018 on the way</subtitle>
  <link href="/gTing.github.io/atom.xml" rel="self"/>
  
  <link href="https://gt1ng.github.io/gTing.github.io/"/>
  <updated>2019-04-16T09:15:23.067Z</updated>
  <id>https://gt1ng.github.io/gTing.github.io/</id>
  
  <author>
    <name>gTing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>小程序学习</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/04/16/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/04/16/小程序学习/</id>
    <published>2019-04-16T08:39:48.000Z</published>
    <updated>2019-04-16T09:15:23.067Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-类的封装与使用"><a href="#1-类的封装与使用" class="headerlink" title="1.类的封装与使用"></a>1.类的封装与使用</h2><p>在小程序中会有一些函数方法会进行反复使用，为了减少代码的冗余度，可以将这些代码封装起来重复利用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">类的导出：</span><br><span class="line"><span class="built_in">export</span> &#123;model&#125;</span><br><span class="line">类的引用：</span><br><span class="line">import &#123;Model&#125; from <span class="string">'url'</span></span><br><span class="line"><span class="built_in">let</span> model = new Model()</span><br><span class="line">类的继承：</span><br><span class="line">import &#123;Model&#125; from <span class="string">'url'</span></span><br><span class="line">class newModel extends Model &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="2-给组件绑定一个点击事件，在不同页面调用时触发不同的函数"><a href="#2-给组件绑定一个点击事件，在不同页面调用时触发不同的函数" class="headerlink" title="2.给组件绑定一个点击事件，在不同页面调用时触发不同的函数"></a>2.给组件绑定一个点击事件，在不同页面调用时触发不同的函数</h2><p>组件wxml文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="built_in">bind</span>:tap=<span class="string">"onLike"</span> class=<span class="string">"container"</span>&gt;</span><br></pre></td></tr></table></figure></p><p>组件js文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onLike:<span class="keyword">function</span>(event)&#123;</span><br><span class="line">    this.triggerEvent(<span class="string">'like'</span>,&#123;&#125;,&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主页面中监听点击事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-like <span class="built_in">bind</span>:like=<span class="string">"onLike"</span> class=<span class="string">"like"</span> like=<span class="string">"&#123;&#123;likeStatus&#125;&#125;"</span> count=<span class="string">"&#123;&#123;likeCount&#125;&#125;"</span>&gt;&lt;/v-like&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-组件间可能会调用一些相同的属性、生命周期函数、数据，这时候可以将重复的部分封装起来，使用behavior"><a href="#3-组件间可能会调用一些相同的属性、生命周期函数、数据，这时候可以将重复的部分封装起来，使用behavior" class="headerlink" title="3.组件间可能会调用一些相同的属性、生命周期函数、数据，这时候可以将重复的部分封装起来，使用behavior"></a>3.组件间可能会调用一些相同的属性、生命周期函数、数据，这时候可以将重复的部分封装起来，使用behavior</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> classicBeh = Behavior(&#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">        img:String,</span><br><span class="line">        content:String,</span><br><span class="line">        hidden:Boolean</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> &#123;classicBeh&#125;</span><br></pre></td></tr></table></figure><p>使用时引入behavior即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123;classicBeh&#125; from <span class="string">'../classic-beh.js'</span></span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors:[classicBeh],</span><br><span class="line">  properties: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="4-善用缓存"><a href="#4-善用缓存" class="headerlink" title="4.善用缓存"></a>4.善用缓存</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-类的封装与使用&quot;&gt;&lt;a href=&quot;#1-类的封装与使用&quot; class=&quot;headerlink&quot; title=&quot;1.类的封装与使用&quot;&gt;&lt;/a&gt;1.类的封装与使用&lt;/h2&gt;&lt;p&gt;在小程序中会有一些函数方法会进行反复使用，为了减少代码的冗余度，可以将这些代码封装起
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mosquitto使用和其他</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/04/15/Mosquitto%E4%BD%BF%E7%94%A8%E5%92%8C%E5%85%B6%E4%BB%96/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/04/15/Mosquitto使用和其他/</id>
    <published>2019-04-15T00:54:45.000Z</published>
    <updated>2019-04-16T08:35:14.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-关于Mosquitto"><a href="#1-关于Mosquitto" class="headerlink" title="1.关于Mosquitto"></a>1.关于Mosquitto</h2><p><a href="https://baijiahao.baidu.com/s?id=1608411516249221334&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">Mosquitto是MQTT协议的一种服务器</a><br>MQTT是一个基于TCP的发布订阅协议，设计的初始目的是为了极有限的内存设备和网络带宽很低的网络不可靠的通信，非常适合物联网通信。</p><h4 id="MQTT消息的QOS"><a href="#MQTT消息的QOS" class="headerlink" title="MQTT消息的QOS"></a>MQTT消息的QOS</h4><p>MQTT支持三种QOS等级：</p><p>QoS 0：“最多一次”，消息发布完全依赖底层 TCP/IP 网络。分发的消息可能丢失或重复。例如，这个等级可用于环境传感器数据，单次的数据丢失没关系，因为不久后还会有第二次发送。</p><p>QoS 1：“至少一次”，确保消息可以到达，但消息可能会重复。</p><p>QoS 2：“只有一次”，确保消息只到达一次。例如，这个等级可用在一个计费系统中，这里如果消息重复或丢失会导致不正确的收费。</p><h4 id="MQTT的消息类型"><a href="#MQTT的消息类型" class="headerlink" title="MQTT的消息类型"></a>MQTT的消息类型</h4><p>1 CONNECT – 连接服务端：客户端到服务端的网络连接建立后， 客户端发送给服务端的第一个报文必须是CONNECT报文</p><p>2 CONNACK – 确认连接请求：服务端发送CONNACK报文响应从客户端收到的CONNECT报文。 服务端发送给客户端的第一个报文必须是CONNACK。如果客户端在合理的时间内没有收到服务端的CONNACK报文， 客户端应该关闭网络连接。合理的时间取决于应用的类型和通信基础设施。</p><p>3 PUBLISH – 发布消息：PUBLISH控制报文是指从客户端向服务端或者服务端向客户端传输一个应用消息。</p><p>4 PUBACK –发布确认：PUBACK报文是对QoS 1等级的PUBLISH报文的响应。</p><p>5 PUBREC – 发布收到（ QoS 2， 第一步）：PUBREC报文是对QoS等级2的PUBLISH报文的响应。 它是QoS 2等级协议交换的第二个报文。</p><p>6 PUBREL – 发布释放（ QoS 2， 第二步）：PUBREL报文是对PUBREC报文的响应。 它是QoS 2等级协议交换的第三个报文。</p><p>7 PUBCOMP – 发布完成（ QoS 2， 第三步）：PUBCOMP报文是对PUBREL报文的响应。 它是QoS 2等级协议交换的第四个也是最后一个报文。</p><p>8 SUBSCRIBE - 订阅主题：客户端向服务端发送SUBSCRIBE报文用于创建一个或多个订阅。 每个订阅注册客户端关心的一个或多个主题。 为了将应用消息转发给与那些订阅匹配的主题， 服务端发送PUBLISH报文给客户端。 SUBSCRIBE报文也（ 为每个订阅） 指定了最大的QoS等级， 服务端根据这个发送应用消息给客户端。</p><p>9 SUBACK – 订阅确认：服务端发送SUBACK报文给客户端， 用于确认它已收到并且正在处理SUBSCRIBE报文。</p><p>10 UNSUBSCRIBE –取消订阅：客户端发送UNSUBSCRIBE报文给服务端， 用于取消订阅主题。</p><p>11 UNSUBACK – 取消订阅确认：服务端发送UNSUBACK报文给客户端用于确认收到UNSUBSCRIBE报文。</p><p>12 PINGREQ – 心跳请求：客户端发送PINGREQ报文给服务端的。 用于：1. 在没有任何其它控制报文从客户端发给服务的时， 告知服务端客户端还活着。2. 请求服务端发送 响应确认它还活着。3. 使用网络以确认网络连接没有断开。</p><p>13 PINGRESP – 心跳响应：服务端发送PINGRESP报文响应客户端的PINGREQ报文。 表示服务端还活着。</p><p>14 DISCONNECT –断开连接：DISCONNECT报文是客户端发给服务端的最后一个控制报文。 表示客户端正常断开连接</p><p>项目中见到的mosquitto函数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var mosq = new Mosquitto();</span><br><span class="line">mosq.connect(url);//连接</span><br><span class="line">mosq.subscribe(topicTradeAlarm, 0);//订阅主题</span><br><span class="line">mosq.onconnect = <span class="function"><span class="title">function</span></span>()&#123;&#125;</span><br><span class="line">mosq.onmessage()//建立连接</span><br><span class="line">mosq.ondisconnect()//失去连接</span><br><span class="line">mosq.publish()//发布消息</span><br><span class="line">mosq.setuc(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><h2 id="2-window、document-documentElement和document-body"><a href="#2-window、document-documentElement和document-body" class="headerlink" title="2.window、document.documentElement和document.body"></a>2.window、document.documentElement和document.body</h2><p>$(window).height(); 才是窗口的宽高，而且一直不变<br>document.body.clientHeight，在文档内容有滚动条的时候远大于$(window).height()<br>document.documentElement.clientWidth 获取的可视区域的宽度高度（缩放窗口的时候 值会发生变化）<br>document.body.clientHeight 不会随着窗口变化而变化，当内容大于一屏时 ，该值肯定大于窗口的高度$(window).height()；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"window.innerWidth==="</span>+window.innerWidth)</span><br><span class="line">console.log(<span class="string">"document.documentElement.clientWidth==="</span>+document.documentElement.clientWidth)</span><br><span class="line">console.log(<span class="string">"document.body.clientWidth==="</span>+document.body.clientWidth)</span><br><span class="line">输出</span><br><span class="line">window.innerWidth===936</span><br><span class="line">document.documentElement.clientWidth===936</span><br><span class="line">document.body.clientWidth===1920</span><br></pre></td></tr></table></figure><h2 id="3-在前端判断鼠标左右键点击事件"><a href="#3-在前端判断鼠标左右键点击事件" class="headerlink" title="3.在前端判断鼠标左右键点击事件"></a>3.在前端判断鼠标左右键点击事件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">events.button==2//鼠标右键</span><br><span class="line">events.button==0//没有按任何按钮</span><br></pre></td></tr></table></figure><h2 id="4-format"><a href="#4-format" class="headerlink" title="4.format()"></a>4.format()</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">格式化日期函数 string.format()</span><br><span class="line">var now=moment()</span><br><span class="line">console.log(now.format(<span class="string">"YYYY-MM-DD"</span>))</span><br><span class="line">输出：2019-04-16</span><br><span class="line">console.log(now.format(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>))</span><br><span class="line">输出：2019-04-16 09:20:17</span><br><span class="line">console.log(now.format(<span class="string">"X"</span>)) //时间戳</span><br><span class="line">输出：1555394984</span><br></pre></td></tr></table></figure><h2 id="5-动画效果的几种方式"><a href="#5-动画效果的几种方式" class="headerlink" title="5.动画效果的几种方式"></a>5.动画效果的几种方式</h2><ol><li><p>transition</p></li><li><p>jQuery的animate函数</p></li></ol><p>该方法通过CSS样式将元素从一个状态改变为另一个状态。CSS属性值是逐渐改变的，这样就可以创建动画效果。</p><p>只有数字值可创建动画（比如 “margin:30px”）。字符串值无法创建动画（比如 “background-color:red”）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(styles,options)</span><br><span class="line">$(<span class="string">"#box"</span>).animate(&#123;height:<span class="string">"300px"</span>&#125;,300);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-关于Mosquitto&quot;&gt;&lt;a href=&quot;#1-关于Mosquitto&quot; class=&quot;headerlink&quot; title=&quot;1.关于Mosquitto&quot;&gt;&lt;/a&gt;1.关于Mosquitto&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baijiahao
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作业帮前端面试题</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/04/04/%E4%BD%9C%E4%B8%9A%E5%B8%AE%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/04/04/作业帮前端面试题/</id>
    <published>2019-04-04T11:09:44.000Z</published>
    <updated>2019-04-16T02:27:46.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-DOCTYPE的作用"><a href="#1-DOCTYPE的作用" class="headerlink" title="1.DOCTYPE的作用"></a>1.DOCTYPE的作用</h2><p>说明用的html或者xhtml是什么版本，让浏览器确定如何进行渲染</p><h2 id="2-为什么css文件放在文件头，js文件放在末尾，谁阻塞了谁"><a href="#2-为什么css文件放在文件头，js文件放在末尾，谁阻塞了谁" class="headerlink" title="2.为什么css文件放在文件头，js文件放在末尾，谁阻塞了谁"></a>2.为什么css文件放在文件头，js文件放在末尾，谁阻塞了谁</h2><ul><li>CSS 不会阻塞 DOM 的解析，但会阻塞 DOM 渲染。</li><li>JS 阻塞 DOM 解析，但浏览器会”偷看”DOM，预先下载相关资源。</li><li>浏览器遇到 script标签且没有defer或async属性的 标签时，会触发页面渲染，因而如果前面CSS资源尚未加载完毕时，浏览器会等待它加载完毕在执行脚本。</li></ul><h2 id="3-重排和重绘"><a href="#3-重排和重绘" class="headerlink" title="3.重排和重绘"></a>3.<a href="https://www.cnblogs.com/cencenyue/p/7646718.html" target="_blank" rel="noopener">重排和重绘</a></h2><p>重绘（repaint或redraw）：<br>当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。<br>重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。<br>触发重绘的条件：改变元素外观属性。如：color，background-color等。<br>注意：table及其内部元素可能需要多次计算才能确定好其在渲染树中节点的属性值，比同等元素要多花两倍时间，这就是我们尽量避免使用table布局页面的原因之一。<br>重排（重构/回流/reflow）：<br>当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。<br>重绘和重排的关系：<br>在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。<br>所以，重排必定会引发重绘，但重绘不一定会引发重排。</p><h2 id="4-js的原始值和引用值"><a href="#4-js的原始值和引用值" class="headerlink" title="4.js的原始值和引用值"></a>4.js的原始值和引用值</h2><p>原始值代表原始数据类型的值，也叫基本数据类型，包括Number、Stirng、Boolean、Null、Underfined<br>存储在栈（stack）中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>原始变量类型及他们的值存储在栈中，当吧一个原始变量传递给另一个原始变量时，是把一个一段栈空间的内容复制到另一段栈空间，这两个原始值互相不影响。</p><p>引用值指的是复合数据类型的值,包括Object(Array也是Object)、Function、Date、RegExp<br>存储在堆（heap）中的对象，也就是说，存储在变量处的值是一个指针（point），指向存储对象的内存处。<br>引用值是把引用变量的名称存储在栈中，但是把其实际对象存在堆中，且存在一个指针有变量名指向存储在堆中的实际对象，当吧引用对象传递给另一个变量时，复制的其实是指向实际对象的指针，此时，若通过方法改变其中一个变量的值，则访问另一个变量时，其值也会随之加以改变;但若不通过方法，而是通过重新赋值 此时 相当于 重新开了一段内存 该值的原指针改变 ，则另外一个 值 不会随他的改变而改变。</p><h2 id="5-deffer和async"><a href="#5-deffer和async" class="headerlink" title="5.deffer和async"></a>5.deffer和async</h2><ul><li>defer属性<br> 只使用外部文件脚本，嵌入代码会被忽略。<br> 表明脚本在执行时不会影响页面的构造。<br> defer要等到整个页面在内存中正常渲染结束（Dom结构完全生成，以及其他脚本执行完成），才会执行。<br> 如果有多个defer脚本，会按照它们在页面中出现的顺序加载。 </li><li>async属性<br>  只使用外部文件脚本，嵌入代码会被忽略，会告诉浏览器立即下载文件。<br>  指定async属性的目的是不让页面等待脚本下载和执行，从而异步加载页面其他内容。即async是下载完脚本就执行，渲染引擎会中断渲染，执行完这个脚本后，再继续渲染。<br>  如果有多个async脚本，不能保证加载顺序，谁先下载好谁执行。</li></ul><h2 id="6-讲一下xhtml"><a href="#6-讲一下xhtml" class="headerlink" title="6.讲一下xhtml"></a>6.讲一下xhtml</h2><p>可扩展超文本标记语言，是一种标记语言，超文本标记语言(HTML)类似，语法上更严格</p><h2 id="7-事件循环"><a href="#7-事件循环" class="headerlink" title="7.事件循环"></a>7.<a href="https://www.cnblogs.com/lsgxeva/p/7976217.html" target="_blank" rel="noopener">事件循环</a></h2><h2 id="8-变量声明提升"><a href="#8-变量声明提升" class="headerlink" title="8.变量声明提升"></a>8.<a href="https://www.cnblogs.com/guanhuachen/p/6038957.html" target="_blank" rel="noopener">变量声明提升</a></h2><h2 id="9-call-和apply"><a href="#9-call-和apply" class="headerlink" title="9.call()和apply()"></a>9.call()和apply()</h2><p>调用一个对象的一个方法，用另一个对象替换当前对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B.call(A,args1,args2)</span><br><span class="line">B.aplly(A,arguments)</span><br></pre></td></tr></table></figure><p>相同点：</p><ul><li>方法的含义一样，即方法功能是一样的</li><li>第一个参数的作用一样</li></ul><p>不同点</p><ul><li>call可以传入多个参数</li><li>apply只能传入两个参数，所以第二个参数往往作为数组传入</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-DOCTYPE的作用&quot;&gt;&lt;a href=&quot;#1-DOCTYPE的作用&quot; class=&quot;headerlink&quot; title=&quot;1.DOCTYPE的作用&quot;&gt;&lt;/a&gt;1.DOCTYPE的作用&lt;/h2&gt;&lt;p&gt;说明用的html或者xhtml是什么版本，让浏览器确定如何进
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3.22面试题</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/03/22/3-22%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/03/22/3-22面试题/</id>
    <published>2019-03-22T03:06:24.000Z</published>
    <updated>2019-03-24T04:51:32.048Z</updated>
    
    <content type="html"><![CDATA[<p>第一次电话面试</p><h2 id="1-JQuery的选择器"><a href="#1-JQuery的选择器" class="headerlink" title="1.JQuery的选择器"></a>1.JQuery的选择器</h2><p>(1)、基本选择器：#id，class,element,*<br>(2)、层次选择器：parent &gt; child，prev + next ，prev ~ siblings<br>(3)、基本过滤器选择器：:first，:last ，:not ，:even ，:odd ，:eq ，:gt ，:lt<br>(4)、内容过滤器选择器： :contains ，:empty ，:has ，:parent<br>(5)、可见性过滤器选择器：:hidden ，:visible<br>(6)、属性过滤器选择器：[attribute] ，[attribute=value] ，[attribute!=value] ，[attribute^=value] ，[attribute$=value] ，[attribute*=value]<br>(7)、子元素过滤器选择器：:nth-child ，:first-child ，:last-child ，:only-child<br>(8)、表单选择器： :input ，:text ，:password ，:radio ，:checkbox ，:submit 等<br>(9)、表单过滤器选择器：:enabled ，:disabled ，:checked ，:selected</p><p>另外可参考：<br><a href="https://www.cnblogs.com/onlys/articles/jQuery.html" target="_blank" rel="noopener">jQuery选择器总结</a></p><h2 id="2-如何判断函数返回值是什么类型"><a href="#2-如何判断函数返回值是什么类型" class="headerlink" title="2.如何判断函数返回值是什么类型"></a>2.如何判断函数返回值是什么类型</h2><p>JavaScript 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。<br>typeof的定义和用法：返回值是一个字符串，用来说明变量的数据类型。<br>细节：<br>(1)、typeof 一般只能返回如下几个结果：number,boolean,string,function,object,undefined。<br>(2)、typeof 来获取一个变量是否存在，如 if(typeof a!=”undefined”){alert(“ok”)}，而不要去使用 if(a) 因为如果 a 不存在（未声明）则会出错。<br>(3)、对于 Array,Null 等特殊对象使用 typeof 一律返回 object，这正是 typeof 的局限性。<br>Instanceof定义和用法：instanceof 用于判断一个变量是否属于某个对象的实例。<br>实例演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a instanceof b?alert(<span class="string">"true"</span>):alert(<span class="string">"false"</span>); //a是b的实例？真:假</span><br><span class="line">var a = new Array(); </span><br><span class="line">alert(a instanceof Array);  // <span class="literal">true</span></span><br><span class="line">alert(a instanceof Object)  // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">test</span></span>()&#123;&#125;;</span><br><span class="line">var a = new <span class="built_in">test</span>();</span><br><span class="line">alert(a instanceof <span class="built_in">test</span>)   // <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>细节：<br>(1)、如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (window instanceof Object)&#123; alert(<span class="string">'Y'</span>)&#125; <span class="keyword">else</span> &#123;  alert(<span class="string">'N'</span>);&#125;  // <span class="string">'N'</span></span><br></pre></td></tr></table></figure><h2 id="3-CSS的优先级"><a href="#3-CSS的优先级" class="headerlink" title="3.CSS的优先级"></a>3.CSS的优先级</h2><h4 id="按照优先规则来确定"><a href="#按照优先规则来确定" class="headerlink" title="按照优先规则来确定"></a>按照优先规则来确定</h4><ul><li><p>CSS 优先规则1： 最近的祖先样式比其他祖先样式优先级高。</p></li><li><p>CSS 优先规则2：”直接样式”比”祖先样式”优先级高。</p></li><li><p>CSS 优先规则3：优先级关系：内联样式 &gt; ID 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器<br>css选择器<br>ID 选择器， 如 #id{}<br>类选择器， 如 .class{}<br>属性选择器， 如 a[href=”segmentfault.com”]{}<br>伪类选择器， 如 :hover{}<br>伪元素选择器， 如 ::before{}<br>标签选择器， 如 span{}<br>通配选择器， 如 *{}</p></li><li><p>CSS 优先规则4：计算选择符中 ID 选择器的个数（a），计算选择符中类选择器、属性选择器以及伪类选择器的个数之和（b），计算选择符中标签选择器和伪元素选择器的个数之和（c）。按 a、b、c 的顺序依次比较大小，大的则优先级高，相等则比较下一个。若最后两个的选择符中 a、b、c 都相等，则按照”就近原则”来判断。@import 语句必须出现在内部样式之前，否则文件引入无效。</p></li><li><p>CSS 优先规则5：属性后插有 !important 的属性拥有最高优先级。若同时插有 !important，则再利用规则 3、4 判断优先级。</p></li></ul><h4 id="直接计算权值"><a href="#直接计算权值" class="headerlink" title="直接计算权值"></a>直接计算权值</h4><p>选择器的特殊性值表述为4个部分，用0,0,0,0表示。</p><ul><li>ID选择器的特殊性值，加0,1,0,0。</li><li>类选择器、属性选择器或伪类，加0,0,1,0。</li><li>元素和伪元素，加0,0,0,1。</li><li>通配选择器*对特殊性没有贡献，即0,0,0,0。</li><li>最后比较特殊的一个标志!important（权重），它没有特殊性值，但它的优先级是最高的，为了方便记忆，可以认为它的特殊性值为1,0,0,0,0。</li></ul><p>参考：<br><a href="https://www.cnblogs.com/wangmeijian/p/4207433.html" target="_blank" rel="noopener">css优先级计算规则</a><br><a href="http://www.runoob.com/w3cnote/css-style-priority.html" target="_blank" rel="noopener">CSS 样式优先级</a></p><h2 id="4-AJAX工作流程"><a href="#4-AJAX工作流程" class="headerlink" title="4.AJAX工作流程"></a>4.AJAX工作流程</h2><p>实现一个AJAX异步调用和局部刷新,通常需要以下几个步骤:</p><ul><li>创建XMLHttpRequest对象,也就是创建一个异步调用对象.</li><li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</li><li>设置响应HTTP请求状态变化的函数.</li><li>发送HTTP请求.</li><li>获取异步调用返回的数据.</li><li>使用JavaScript和DOM实现局部刷新.</li></ul><h2 id="5-百度地图中调用经纬度的方法名字"><a href="#5-百度地图中调用经纬度的方法名字" class="headerlink" title="5.百度地图中调用经纬度的方法名字"></a>5.百度地图中调用经纬度的方法名字</h2><h2 id="6-bootstrap里面的table-list"><a href="#6-bootstrap里面的table-list" class="headerlink" title="6.bootstrap里面的table-list"></a>6.bootstrap里面的table-list</h2><h2 id="5-Axure如何给按钮绑定事件"><a href="#5-Axure如何给按钮绑定事件" class="headerlink" title="5.Axure如何给按钮绑定事件"></a>5.Axure如何给按钮绑定事件</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次电话面试&lt;/p&gt;
&lt;h2 id=&quot;1-JQuery的选择器&quot;&gt;&lt;a href=&quot;#1-JQuery的选择器&quot; class=&quot;headerlink&quot; title=&quot;1.JQuery的选择器&quot;&gt;&lt;/a&gt;1.JQuery的选择器&lt;/h2&gt;&lt;p&gt;(1)、基本选择器：#id，c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3.21面试题</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/03/21/3-21%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/03/21/3-21面试题/</id>
    <published>2019-03-21T05:35:54.000Z</published>
    <updated>2019-03-24T02:41:50.095Z</updated>
    
    <content type="html"><![CDATA[<p>第一次去三星面试前端开发的内容</p><h2 id="1-js数据类型有哪些"><a href="#1-js数据类型有哪些" class="headerlink" title="1.js数据类型有哪些"></a>1.js数据类型有哪些</h2><ul><li>1.Number类型<br>Number类型包含整数和浮点数（浮点数数值必须包含一个小数点，且小数点后面至少有一位数字）两种值。<br>NaN:非数字类型。特点：① 涉及到的 任何关于NaN的操作，都会返回NaN   ② NaN不等于自身。<br>isNaN() 函数用于检查其参数是否是非数字值。<br>isNaN(123)  //false   isNaN(“hello”)  //true</li><li>2.String类型<br>字符串有length属性。<br>字符串转换：转型函数String(),适用于任何数据类型（null,undefined 转换后为null和undefined）；toString()方法（null,defined没有toString()方法）。</li><li>3.Boolean类型<br>该类型只有两个值，true和false</li><li>4.Undefined类型<br>只有一个值，即undefined值。使用var声明了变量，但未给变量初始化值，那么这个变量的值就是undefined。</li><li>5.Null类型<br>null类型被看做空对象指针，前文说到null类型也是空的对象引用。</li><li>6.Object类型<br>js中对象是一组属性与方法的集合。这里就要说到引用类型了，引用类型是一种数据结构，用于将数据和功能组织在一起。引用类型有时候也被称为对象定义，因为它们描述的是一类对象所具有的属性和方法。</li></ul><h2 id="2-数组有哪些方法"><a href="#2-数组有哪些方法" class="headerlink" title="2.数组有哪些方法"></a>2.<a href="https://www.cnblogs.com/obel/p/7016414.html" target="_blank" rel="noopener">数组有哪些方法</a></h2><p>join()<br>push()和pop()<br>shift() 和 unshift()<br>sort()<br>reverse()<br>concat()<br>slice()<br>splice()<br>indexOf()和 lastIndexOf() （ES5新增）<br>forEach() （ES5新增）<br>map() （ES5新增）<br>filter() （ES5新增）<br>every() （ES5新增）<br>some() （ES5新增）<br>reduce()和 reduceRight() （ES5新增）</p><h2 id="3-字符串有哪些方法"><a href="#3-字符串有哪些方法" class="headerlink" title="3.字符串有哪些方法"></a>3.<a href="https://www.cnblogs.com/d-lion/p/6088619.html" target="_blank" rel="noopener">字符串有哪些方法</a></h2><p>1、charCodeAt方法返回一个整数，代表指定位置字符的Unicode编码。<br>2、fromCharCode方法从一些Unicode字符串中返回一个字符串。<br>3、charAt方法返回指定索引位置处的字符。如果超出有效范围的索引值返回空字符串。<br>4、slice方法返回字符串的片段。<br>5、substring方法返回位于String对象中指定位置的子字符串。<br>6、substr方法返回一个从指定位置开始的指定长度的子字符串。<br>7、indexOf方法放回String对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。<br>8、lastIndexOf方法返回String对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1。<br>9、search方法返回与正则表达式查找内容匹配的第一个字符串的位置。<br>10、concat方法返回字符串值，该值包含了两个或多个提供的字符串的连接。<br>11、split将一个字符串分割为子字符串，然后将结果作为字符串数组返回。<br>12、toLowerCase方法返回一个字符串，该字符串中的字母被转换成小写。<br>13、toUpperCase方法返回一个字符串，该字符串中的所有字母都被转换为大写字母。 </p><h2 id="4-冒泡排序和快速排序-链接包括其他js排序"><a href="#4-冒泡排序和快速排序-链接包括其他js排序" class="headerlink" title="4.冒泡排序和快速排序(链接包括其他js排序)"></a>4.<a href="https://www.cnblogs.com/beli/p/6297741.html" target="_blank" rel="noopener">冒泡排序和快速排序(链接包括其他js排序)</a></h2><ul><li><p>冒泡排序<br>1.比较相邻的两个元素，如果前一个比后一个大，则交换位置。<br>2.第一轮的时候最后一个元素应该是最大的一个。<br>3.按照步骤一的方法进行相邻两个元素的比较，这个时候由于最后一个元素已经是最大的了，所以最后一个元素不用比较。</p></li><li><p>快速排序<br>快速排序是对冒泡排序的一种改进，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。</p></li></ul><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">动图演示排列</a></p><h2 id="5-ES6新特性"><a href="#5-ES6新特性" class="headerlink" title="5.ES6新特性"></a>5.<a href="http://www.cnblogs.com/xkloveme/p/7456656.html" target="_blank" rel="noopener">ES6新特性</a></h2><p>默认参数<br>模版表达式<br>多行字符串<br>拆包表达式<br>改进的对象表达式<br>箭头函数 =&amp;&gt;<br>Promise<br>块级作用域的let和const<br>类<br>模块化</p><h2 id="6-CSS3新特性"><a href="#6-CSS3新特性" class="headerlink" title="6.CSS3新特性"></a>6.<a href="https://segmentfault.com/a/1190000010936764" target="_blank" rel="noopener">CSS3新特性</a></h2><p>1.CSS3选择器<br>2.CSS3边框与圆角<br>3.CSS3背景与渐变<br>4.CSS3过渡<br>5.CSS3变换<br>6.CSS3动画 </p><h2 id="7-localStorage、sessionStorage和cookie区别"><a href="#7-localStorage、sessionStorage和cookie区别" class="headerlink" title="7.localStorage、sessionStorage和cookie区别"></a>7.<a href="https://segmentfault.com/a/1190000012057010?utm_source=tag-newest" target="_blank" rel="noopener">localStorage、sessionStorage和cookie区别</a></h2><ul><li>共同点：用于浏览器端存储的缓存数据</li><li>不同点：<br>(1)、存储内容是否发送到服务器端。当设置了cookie后，数据会发送到服务器端，造成一定的宽带浪费；web storage会将数据保存到本地，不会造成资源浪费(2)、数据存储大小不同。cookie数据不能超过4k；web storage数据存储可以达到5M；<br>(3)、存储周期不同；cookie只在设置了cookie过期时间之前有效，即使关闭浏览器和窗口；localstorage数据存储永久有效；sessionstorage仅在浏览器关闭之前有效；<br>(4)、作用域不同：cookie和localstorage在同源同窗口中都是共享的3<br>webstorage相比cookie的优势<br>(1)、存储空间更大<br>(2)、存储内容不会发送到服务器，减少宽带资源的浪费<br>(3)、更多丰富易用的接口<br>(4)、独立的存储空间</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;第一次去三星面试前端开发的内容&lt;/p&gt;
&lt;h2 id=&quot;1-js数据类型有哪些&quot;&gt;&lt;a href=&quot;#1-js数据类型有哪些&quot; class=&quot;headerlink&quot; title=&quot;1.js数据类型有哪些&quot;&gt;&lt;/a&gt;1.js数据类型有哪些&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.Num
      
    
    </summary>
    
    
      <category term="面试" scheme="https://gt1ng.github.io/gTing.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2019/03/21/hello-world/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2019/03/21/hello-world/</id>
    <published>2019-03-21T05:26:30.010Z</published>
    <updated>2018-06-27T02:19:46.919Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于招聘信息</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2018/07/01/%E5%85%B3%E4%BA%8E%E6%8B%9B%E8%81%98%E4%BF%A1%E6%81%AF/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2018/07/01/关于招聘信息/</id>
    <published>2018-07-01T01:29:51.000Z</published>
    <updated>2019-04-16T08:35:30.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直再看一些公司招聘前端的信息，</p><ul><li>1.兼容市面PC和移动主流浏览器</li></ul><p>最基本的不同浏览器CSS3前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-webkit-　　　　　　chrome、safari</span><br><span class="line">-moz-　　　　　　　 firefox</span><br><span class="line">-ms-               IE</span><br><span class="line">-o-                opera</span><br></pre></td></tr></table></figure><ul><li>2.理解w3c标准</li></ul><blockquote><p>w3c标准包括多个方面，官方是从应用角度分的。如果从WEB技术角度，可以分为三个方面的标准：结构、表现、行为。<br>结构：主要指(X)HTML标准，包括各种标签的名字、属性、语义及其他相关标准。<br>表现：主要指CSS，包括各种定位、颜色、大小等方面的标准。<br>行为：主要指Javascript，其实主要由ECMA国际制定的标准，但由于在万维网上广泛应用，开发人员也要关注。Javascript的词法、表达式、语句等方面也有一系列的标准。 Javascript没有像Java JDK那样的现成二进制文件，只有文档标准，具体的实现交给了各浏览器，所以在开发过程中，各浏览器的兼容性问题会是一个问题，我们在处理的时候可以遵循鸭式辨型原则去处理。</p></blockquote><ul><li>3.对表现与数据分离、web语义化、提升用户体验有所了解</li></ul><blockquote><p>数据分离：理解MVC<br>web语义化：Web语义化是指使用语义恰当的标签，使页面有良好的结构，页面元素有含义，能够让人和搜索引擎都容易理解</p></blockquote><ul><li>4.对前端工程化与模块化开发有一定了解</li></ul><blockquote><p>模块化中的模块一般指的是Javascript模块，比如一个用来格式化时间的模块。<br>组件则包含了template、style和script，而它的Script可以由各种模块组成。比如一个显示时间的组件会调用上面的那个格式化时间的模块。（vue）</p></blockquote><ul><li>5.ajax与后端进行api对接交互</li></ul><p>就是前后端用ajax进行数据交互时后端给前端提供的接口，一般常用格式有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: <span class="string">"你的webapi"</span>,</span><br><span class="line">   <span class="built_in">type</span>: <span class="string">"Get"</span>,</span><br><span class="line">   DATA&#123;&#125;,//这里面写你要传给后端的数据，不过GET方法一般不需要，直接读就可以了</span><br><span class="line">   success: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">      //成功后的<span class="built_in">return</span>事件</span><br><span class="line">     &#125;</span><br><span class="line">   error: <span class="keyword">function</span> (data) &#123;</span><br><span class="line">     alert(<span class="string">"data"</span>);//请求错误后的报错事件(很重要，如果你报错了不知道哪儿要改的话这个可以帮助你，我个人感觉主要是500报错)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>其他可以参考<a href="https://www.jb51.net/article/113570.htm" target="_blank" rel="noopener">前端ajax的各种与后端交互的姿势</a></p><ul><li><p>6.数据绑定原理</p><p>目前接触的数据绑定大部分都是单向的，都是从数据库获取数据然后控制DOM展示数据，一旦数据发生变化，就去更新页面。<br>在学习vue的过程中接触到了双向绑定。</p><blockquote><p>使用v-model指令，实现视图和数据的双向绑定。<br>所谓双向绑定，指的是vue实例中的data与其渲染的DOM元素的内容保持一致，无论谁被改变，另一方会相应的更新为相同的数据。这是通过设置属性访问器实现的。<br>v-model主要用在表单的input输入框，完成视图和数据的双向绑定。<br>v-model只能用在input、select、textarea这些表单元素上。<br>双向绑定的缺点：不知道data什么时候变了，也不知道是谁变了，变化后也不会通知，当然可以watch来监听data的变化，但这复杂，还不如单向绑定。<br>在网上看到的一个比较好的关于数据绑定的解析：<a href="https://www.imooc.com/article/27631" target="_blank" rel="noopener">西安电话面试：谈谈Vue数据双向绑定原理，看看你的回答能打几分</a></p></blockquote></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><a href="web标准与HTML语义化">web标准与HTML语义化</a><br><a href="https://www.cnblogs.com/dolphinX/p/3311588.html" target="_blank" rel="noopener">Web语义化</a><br><a href="https://blog.csdn.net/qq_19318067/article/details/53939230" target="_blank" rel="noopener">前端开发的模块化和组件化的定义，以及两者的关系？</a><br><a href="https://baike.baidu.com/item/W3C%E6%A0%87%E5%87%86/8367679" target="_blank" rel="noopener">W3C标准</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直再看一些公司招聘前端的信息，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.兼容市面PC和移动主流浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最基本的不同浏
      
    
    </summary>
    
    
      <category term="招聘" scheme="https://gt1ng.github.io/gTing.github.io/tags/%E6%8B%9B%E8%81%98/"/>
    
  </entry>
  
  <entry>
    <title>github+hexo的踩坑之路</title>
    <link href="https://gt1ng.github.io/gTing.github.io/2018/06/27/github%20page+hexo%E9%87%87%E5%9D%91%E8%BF%87%E7%A8%8B/"/>
    <id>https://gt1ng.github.io/gTing.github.io/2018/06/27/github page+hexo采坑过程/</id>
    <published>2018-06-27T02:25:01.000Z</published>
    <updated>2018-06-27T08:32:21.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都很想有一个个人博客，但是无从下手。突然有一天看到了一篇教程——<a href="https://www.cnblogs.com/jackyroc/p/7681938.html" target="_blank" rel="noopener">我是如何利用Github Pages搭建起我的博客，细数一路的坑</a>,然后照着这篇教程开始动手。虽然教程中作者已经讲到了自己所踩的坑，但是不可避免的自己还是碰到了很多问题。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1. 安装主题"></a>1. 安装主题</h3><p>安装主题要在git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>也可能是网络或者其他原因，一直失败，后来在github中又找到了next主题，看了说明找到了安装地址，这次成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="2-部署到github"><a href="#2-部署到github" class="headerlink" title="2. 部署到github"></a>2. 部署到github</h3><p>在本地用打开页面，是正常显示的，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>部署到github上的时候，打卡页面样式无法显示，并且会在控制台报错找不到文件，后来看了同样采坑的人的建议，因为网站在二级目录中，要修改_config.yml文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://gt1ng.github.io/gTing.github.io/</span><br><span class="line">root: /gTing.github.io</span><br></pre></td></tr></table></figure><p>修改保存然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g //生成静态文件</span><br><span class="line">$ hexo d //部署到远端服务器</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这是第一次用自己搭建的博客，也是第一次用标记语言编辑，最后的最后，希望每天都能接触到新东西<br>标记语言参考——<a href="https://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="noopener">Markdown——入门指南</a><br>next主题参考<a href="https://blog.csdn.net/qsdsn/article/details/77946677" target="_blank" rel="noopener">Hexo设置主题以及Next主题个性设置</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直都很想有一个个人博客，但是无从下手。突然有一天看到了一篇教程——&lt;a href=&quot;https://www.cnblogs.com/jac
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://gt1ng.github.io/gTing.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
